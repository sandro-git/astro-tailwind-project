---
import ReservationLayout from "../../layouts/ReservationLayout.astro";
import { db, Reservations } from "astro:db";

import { parseISO, setHours, setMinutes, format, addMinutes, isSameDay } from "date-fns";
import { fr } from "date-fns/locale";

const numberOfPeople = await Astro.session.get("numberOfPeople");
const typeOfVr = await Astro.session.get("typeOfVr");
const duration = await Astro.session.get("duration");
const selectedDate: string = await Astro.session.get("date");

// Configuration
const interval = parseInt(duration, 10);
if (isNaN(interval) || (interval !== 30 && interval !== 60)) {
  return [];
} // 30 ou 60 minutes

// Liste des créneaux indisponibles
// const unavailableTimesSet = new Set(["15:30", "17:00", "18:30", "20:00"]);

// Fonction pour vérifier si un créneau est disponible
async function isTimeSlotAvailable(dateTime: Date, durationMinutes: number, requestedPeople: number, vrType: string): Promise<boolean> {
  const slotEndTime = addMinutes(dateTime, durationMinutes);
  
  // Récupérer toutes les réservations confirmées pour cette date
  const existingReservations = await db.select().from(Reservations);
  
  // Filtrer les réservations du même jour
  const dayReservations = existingReservations.filter(reservation => 
    isSameDay(new Date(reservation.dateTime), dateTime)
  );
  
  // Vérifier tous les chevauchements possibles avec les réservations existantes
  const overlappingReservations = dayReservations.filter(reservation => {
    const reservationStart = new Date(reservation.dateTime);
    const reservationEnd = addMinutes(reservationStart, reservation.duration);
    
    // Vérifier si les créneaux se chevauchent (toutes les possibilités)
    return (
      // Le nouveau créneau commence pendant une réservation existante
      (dateTime >= reservationStart && dateTime < reservationEnd) ||
      // Le nouveau créneau se termine pendant une réservation existante
      (slotEndTime > reservationStart && slotEndTime <= reservationEnd) ||
      // Le nouveau créneau englobe complètement la réservation existante
      (dateTime <= reservationStart && slotEndTime >= reservationEnd) ||
      // La réservation existante englobe complètement le nouveau créneau
      (reservationStart <= dateTime && reservationEnd >= slotEndTime)
    );
  });
  
  // Séparer par type de VR pour les réservations qui se chevauchent
  const vrStandardReservations = overlappingReservations.filter(r => r.vrType === 'VR');
  const vrWirelessReservations = overlappingReservations.filter(r => r.vrType === 'VR_WIRELESS');
  
  if (vrType === 'VR_WIRELESS') {
    // VR sans fil : une seule réservation VR sans fil par période qui se chevauche
    // Peut coexister avec VR standard
    return vrWirelessReservations.length === 0;
  } else {
    // VR standard : max 6 personnes au total sur les créneaux qui se chevauchent
    // Peut coexister avec VR sans fil
    
    // Calculer le nombre total de personnes avec VR standard qui se chevauchent
    const totalVRStandardPeople = vrStandardReservations.reduce((sum, r) => sum + r.numberOfPeople, 0);
    
    // Vérifier si on peut ajouter les nouvelles personnes sans dépasser 6
    return (totalVRStandardPeople + requestedPeople) <= 6;
  }
}

// Fonction pour générer les créneaux
async function generateTimeSlots(dateString: string, interval = 60, numberOfPeople: number, vrType: string) {
  // Configuration de base
  const startHour = 14;
  const endHour = 22;
  const now = new Date();
  const slots: { value: string; label: string; available: boolean }[] = [];

  // Sortie anticipée si pas de date
  if (!dateString) {
    return slots;
  }

  // Parsing de la date sélectionnée
  const selectedDate = parseISO(dateString);

  // Créer une date pour aujourd'hui à minuit pour comparaison
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  // Créer une date pour la date sélectionnée à minuit
  const selectedMidnight = new Date(
    selectedDate.getFullYear(),
    selectedDate.getMonth(),
    selectedDate.getDate()
  );

  // Vérifier le type de date (aujourd'hui, passée, future)
  const isToday = selectedMidnight.getTime() === today.getTime();
  const isPastDate = selectedMidnight.getTime() < today.getTime();

  // Pour les dates passées, ne pas afficher de créneaux
  if (isPastDate) {
    return slots;
  }

  // Générer tous les créneaux possibles
  for (let hour = startHour; hour < endHour; hour++) {
    for (let minute = 0; minute < 60; minute += interval) {
      // Création d'une date pour ce créneau
      const slotDateTime = setMinutes(setHours(selectedDate, hour), minute);

      // Vérifier si le créneau est déjà passé (seulement pour aujourd'hui)
      if (isToday && slotDateTime <= now) {
        continue;
      }

      const formattedValue = format(slotDateTime, "H:mm");
      
      // Vérifier la disponibilité du créneau
      const isAvailable = await isTimeSlotAvailable(slotDateTime, interval, numberOfPeople, vrType);

      slots.push({
        value: formattedValue,
        label: formattedValue,
        available: isAvailable,
      });
    }
  }

  return slots;
}

// Générer les créneaux disponibles
const availableTimeSlots = await generateTimeSlots(selectedDate, interval, numberOfPeople, typeOfVr);
---

<ReservationLayout title="Réservation - Horaires" currentStep={5}>
  <form id="timeForm">
    <div>
      <h2 class="text-2xl font-bold text-white mb-4">
        Choisissez un horaire
      </h2>
      <div class="bg-gray-800 p-4 rounded-lg mb-6">
        <div class="flex justify-between items-center mb-2">
          <h3 class="text-lg font-medium text-white">
            Récapitulatif de votre réservation
          </h3>
          <p class="text-gray-300">
            Pour {numberOfPeople} personnes {typeOfVr} pour {duration} minutes le
            {format(selectedDate, "EEEE d MMMM", { locale: fr })}
          </p>
        </div>

        <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
          {
            availableTimeSlots.map((timeSlot) => (
              <label class={`time-slot relative block ${!timeSlot.available ? 'opacity-50 cursor-not-allowed' : ''}`}>
                <input
                  type="radio"
                  name="time"
                  value={timeSlot.value}
                  class="time-radio peer sr-only"
                  required
                  disabled={!timeSlot.available}
                />
                <div class={`h-16 flex items-center justify-center rounded-lg border-2 text-center transition-all ${
                  timeSlot.available 
                    ? 'border-gray-600 bg-gray-800 cursor-pointer peer-checked:border-blue-500 peer-checked:bg-blue-900 hover:border-gray-500' 
                    : 'border-red-600 bg-red-900/20 cursor-not-allowed'
                }`}>
                  <span class={`text-lg font-medium ${timeSlot.available ? 'text-white' : 'text-red-400'}`}>
                    {timeSlot.label}
                    {!timeSlot.available && <span class="block text-xs">Indisponible</span>}
                  </span>
                </div>
              </label>
            ))
          }
        </div>
      </div>

      <div
        class="pt-4 flex flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between"
      >
        <!-- Boutton de retour -->
        <a
          href={`/reservation/duration`}
          class="py-2.5 px-5 border border-gray-600 text-gray-300 rounded-lg hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-center"
        >
          ← Retour
        </a>
        <button
          type="submit"
          id="continueButton"
          disabled
          class="py-2.5 px-5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors opacity-50 cursor-not-allowed"
        >
          Continuer →
        </button>
      </div>
    </div>
  </form>
</ReservationLayout>
<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  document.addEventListener("DOMContentLoaded", function () {
    // DOM elements
    const continueButton = document.getElementById("continueButton");
    const timeSlots = document.querySelectorAll(".time-slot");

    // Helper function to enable continue button
    const enableContinueButton = () => {
      if (continueButton instanceof HTMLButtonElement) {
        continueButton.disabled = false;
        continueButton.classList.remove("opacity-50", "cursor-not-allowed");
      }
    };

    // Handle time slot selection
    timeSlots.forEach((slot) => {
      slot.addEventListener("click", async () => {
        const radio = slot.querySelector(".time-radio");
        if (radio instanceof HTMLInputElement && !radio.disabled) {
          // Set radio as checked
          radio.checked = true;

          // Enable continue button
          enableContinueButton();

          // No need for manual highlighting as we're using peer-checked classes in the HTML
        }
      });
    });

    // Handle form submission
    const form = document.querySelector("form");
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(form);
      const { error } = await actions.saveTime(formData);
      if (!error) navigate("/reservation/contact");
    });
  });
</script>
