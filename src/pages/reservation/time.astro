---
import ReservationLayout from "../../layouts/ReservationLayout.astro";

import { parseISO, setHours, setMinutes, format } from "date-fns";
import { fr } from "date-fns/locale";

const numberOfPeople = await Astro.session.get("numberOfPeople");
const typeOfVr = await Astro.session.get("typeOfVr");
const duration = await Astro.session.get("duration");
const selectedDate: string = await Astro.session.get("date");

// Configuration
const interval = parseInt(duration, 10);
if (isNaN(interval) || (interval !== 30 && interval !== 60)) {
  return [];
} // 30 ou 60 minutes

// Liste des créneaux indisponibles
// const unavailableTimesSet = new Set(["15:30", "17:00", "18:30", "20:00"]);

// Fonction pour générer les créneaux

function generateTimeSlots(dateString: string, interval = 60) {
  // Configuration de base
  const startHour = 14;
  const endHour = 22;
  const now = new Date();
  const unavailableTimesSet = new Set([]);
  const slots: { value: string; label: string }[] = [];

  // Sortie anticipée si pas de date
  if (!dateString) {
    return slots;
  }

  // Parsing de la date sélectionnée
  const selectedDate = parseISO(dateString);

  // Créer une date pour aujourd'hui à minuit pour comparaison
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  // Créer une date pour la date sélectionnée à minuit
  const selectedMidnight = new Date(
    selectedDate.getFullYear(),
    selectedDate.getMonth(),
    selectedDate.getDate()
  );

  // Vérifier le type de date (aujourd'hui, passée, future)
  const isToday = selectedMidnight.getTime() === today.getTime();
  const isPastDate = selectedMidnight.getTime() < today.getTime();

  // Pour les dates passées, ne pas afficher de créneaux
  if (isPastDate) {
    return slots;
  }

  // MODIFICATION : Générer des créneaux pour aujourd'hui ET les dates futures
  // Générer tous les créneaux possibles
  for (let hour = startHour; hour < endHour; hour++) {
    for (let minute = 0; minute < 60; minute += interval) {
      // Création d'une date pour ce créneau
      const currentDate = new Date();
      const slotTime = setMinutes(setHours(currentDate, hour), minute);

      // Vérifier si le créneau est déjà passé (seulement pour aujourd'hui)
      if (isToday && slotTime <= now) {
        continue;
      }

      const formattedValue = format(slotTime, "H:mm");

      // Ajouter le créneau s'il est disponible
      if (!unavailableTimesSet.has(formattedValue)) {
        slots.push({
          value: formattedValue,
          label: formattedValue,
        });
      }
    }
  }

  return slots;
}

// Générer les créneaux disponibles
const availableTimeSlots = generateTimeSlots(selectedDate, interval);
---

<ReservationLayout title="Réservation - Horaires" currentStep={5}>
  <form id="timeForm">
    <div>
      <h2 class="text-2xl font-bold text-gray-900 mb-4">
        Choisissez un horaire
      </h2>
      <div class="bg-gray-50 p-4 rounded-lg mb-6">
        <div class="flex justify-between items-center mb-2">
          <h3 class="text-lg font-medium text-gray-800">
            Récapitulatif de votre réservation
          </h3>
          <p class="text-gray-600">
            Pour {numberOfPeople} personnes {typeOfVr} pour {duration} minutes le
            {format(selectedDate, "EEEE d MMMM", { locale: fr })}
          </p>
        </div>

        <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
          {
            availableTimeSlots.map((timeSlot) => (
              <label class="time-slot relative block">
                <input
                  type="radio"
                  name="time"
                  value={timeSlot.value}
                  class="time-radio peer sr-only"
                  required
                />
                <div class="h-16 flex items-center justify-center rounded-lg border-2 border-gray-300 bg-white text-center cursor-pointer peer-checked:border-blue-500 peer-checked:bg-blue-50 transition-all">
                  <span class="text-lg font-medium">{timeSlot.label}</span>
                </div>
              </label>
            ))
          }
        </div>
      </div>

      <div
        class="pt-4 flex flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between"
      >
        <!-- Boutton de retour -->
        <a
          href={`/reservation/duration`}
          class="py-2.5 px-5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors text-center"
        >
          ← Retour
        </a>
        <button
          type="submit"
          id="continueButton"
          disabled
          class="py-2.5 px-5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors opacity-50 cursor-not-allowed"
        >
          Continuer →
        </button>
      </div>
    </div>
  </form>
</ReservationLayout>
<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  document.addEventListener("DOMContentLoaded", function () {
    // DOM elements
    const continueButton = document.getElementById("continueButton");
    const timeSlots = document.querySelectorAll(".time-slot");

    // Helper function to enable continue button
    const enableContinueButton = () => {
      if (continueButton instanceof HTMLButtonElement) {
        continueButton.disabled = false;
        continueButton.classList.remove("opacity-50", "cursor-not-allowed");
      }
    };

    // Handle time slot selection
    timeSlots.forEach((slot) => {
      slot.addEventListener("click", async () => {
        const radio = slot.querySelector(".time-radio");
        if (radio instanceof HTMLInputElement) {
          // Set radio as checked
          radio.checked = true;

          // Enable continue button
          enableContinueButton();

          // No need for manual highlighting as we're using peer-checked classes in the HTML
        }
      });
    });

    // Handle form submission
    const form = document.querySelector("form");
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const formData = new FormData(form);
      const { error } = await actions.saveTime(formData);
      if (!error) navigate("/reservation/contact");
    });
  });
</script>
