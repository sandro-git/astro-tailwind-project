---
import ReservationLayout from '../../layouts/ReservationLayout.astro';

// Récupérer les paramètres
const numberOfPeople = Astro.url.searchParams.get('numberOfPeople');
const vrType = Astro.url.searchParams.get('vrType');
const duration = Astro.url.searchParams.get('duration');
const selectedDate = Astro.url.searchParams.get('selectedDate');

// Formatage de la date pour l'affichage
let formattedDate = '';
if (selectedDate) {
  try {
    const date = new Date(selectedDate);
    const options: Intl.DateTimeFormatOptions = { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long',
      year: 'numeric'
    };
    formattedDate = date.toLocaleDateString('fr-FR', options);
  } catch (error) {
    console.error('Erreur lors du formatage de la date:', error);
  }
}

// Debugging
console.log('Server-side values:');
console.log('- numberOfPeople:', numberOfPeople);
console.log('- vrType:', vrType);
console.log('- duration:', duration);
console.log('- selectedDate:', selectedDate);
console.log('- formattedDate:', formattedDate);

// Simuler les créneaux disponibles en fonction de la durée choisie
const timeSlots = [];
const durationInMin = parseInt(duration || '30');

// Heures d'ouverture: 14h-22h (selon les exigences mises à jour)
// Si durée = 30min, proposer des créneaux toutes les 30min
// Si durée = 60min, proposer des créneaux toutes les heures
const startHour = 14;
const endHour = 22;
const interval = durationInMin;

// Générer des créneaux en fonction de la durée
for (let hour = startHour; hour < endHour; hour++) {
  // Pour la durée de 30min, on ajoute 2 créneaux par heure
  if (interval === 30) {
    timeSlots.push({
      value: `${hour}:00`,
      label: `${hour}:00`
    });
    timeSlots.push({
      value: `${hour}:30`,
      label: `${hour}:30`
    });
  } 
  // Pour la durée de 60min, on ajoute 1 créneau par heure
  else if (interval === 60) {
    timeSlots.push({
      value: `${hour}:00`,
      label: `${hour}:00`
    });
  }
}

// Simuler la non-disponibilité de certains créneaux
// Dans une vraie application, ces données viendraient de la base de données
const unavailableTimesSet = new Set([
  '15:30',
  '17:00',
  '18:30',
  '20:00'
]);

// Filtrer les créneaux disponibles
const availableTimeSlots = timeSlots.filter(slot => !unavailableTimesSet.has(slot.value));
---

<ReservationLayout title="Réservation - Horaires" currentStep={5}>
  <form method="get" action="/reservation/contact" class="space-y-6" id="timeForm">
    <!-- Transmettre les données des étapes précédentes -->
    <input type="hidden" name="numberOfPeople" value={numberOfPeople} />
    <input type="hidden" name="vrType" value={vrType} />
    <input type="hidden" name="duration" value={duration} />
    <input type="hidden" name="selectedDate" value={selectedDate} />
    
    <div>
      <h2 class="text-2xl font-bold text-gray-900 mb-4">Choisissez un horaire</h2>
      <div class="bg-gray-50 p-4 rounded-lg mb-6">
        <h3 class="text-lg font-medium text-gray-800 mb-2">Récapitulatif de votre réservation</h3>
        {formattedDate ? (
          <p class="text-gray-600"><span class="font-medium">Date:</span> {formattedDate}</p>
        ) : (
          <p class="text-gray-600"><span class="font-medium">Date:</span> <span id="jsDate" class="italic text-gray-500">Chargement...</span></p>
        )}
        <p class="text-gray-600"><span class="font-medium">Type:</span> <span id="jsVrType">{vrType === 'wired' ? 'VR filaire' : vrType === 'wireless' ? 'VR sans fil' : 'Chargement...'}</span></p>
        <p class="text-gray-600"><span class="font-medium">Durée:</span> <span id="jsDuration">{duration ? `${duration} minutes` : 'Chargement...'}</span></p>
        <p class="text-gray-600"><span class="font-medium">Nombre de personnes:</span> <span id="jsNumberOfPeople">{numberOfPeople || 'Chargement...'}</span></p>
      </div>
      
      {availableTimeSlots.length > 0 ? (
        <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
          {availableTimeSlots.map((timeSlot) => (
            <label class="relative block">
              <input 
                type="radio" 
                name="selectedTime" 
                value={timeSlot.value} 
                class="peer sr-only" 
                required
              />
              <div class="h-16 flex items-center justify-center rounded-lg border-2 border-gray-300 bg-white text-center cursor-pointer peer-checked:border-blue-500 peer-checked:bg-blue-50 transition-all">
                <span class="text-lg font-medium">{timeSlot.label}</span>
              </div>
            </label>
          ))}
        </div>
      ) : (
        <div class="bg-amber-50 border-l-4 border-amber-500 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-amber-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm text-amber-700">
                Aucun créneau disponible pour cette date. Veuillez sélectionner une autre date.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
    
    <div class="pt-4 flex flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between">
      <a 
        href={`/reservation/date?numberOfPeople=${numberOfPeople}&vrType=${vrType}&duration=${duration}`} 
        class="py-2.5 px-5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors text-center"
      >
        ← Retour
      </a>
      <button
        type="submit"
        class="py-2.5 px-5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
        id="continueButton"
      >
        Continuer →
      </button>
    </div>
  </form>
</ReservationLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Sélectionner le formulaire
    const timeForm = document.getElementById('timeForm');
    
    // Récupérer les boutons radio
    const radioButtons = document.querySelectorAll('input[name="selectedTime"]');
    
    // Vérifier si le bouton Continuer doit être activé
    const continueButton = document.getElementById('continueButton');
    if (radioButtons.length === 0 && continueButton) {
      if (continueButton instanceof HTMLButtonElement) {
        continueButton.disabled = true;
      }
      continueButton.classList.add('opacity-50', 'cursor-not-allowed');
    }
    
    // Ajouter un gestionnaire d'événement change à chaque bouton radio
    radioButtons.forEach(radio => {
      radio.addEventListener('change', () => {
        if (radio instanceof HTMLInputElement && radio.checked) {
          // Stocker la valeur dans sessionStorage
          sessionStorage.setItem('reservation_selectedTime', radio.value);
          console.log('Horaire sélectionné:', radio.value);
        }
      });
    });
    
    // Vérifier s'il y a une valeur sauvegardée
    const savedValue = sessionStorage.getItem('reservation_selectedTime');
    if (savedValue) {
      // Sélectionner le bouton radio correspondant
      const radioToSelect = document.querySelector(`input[name="selectedTime"][value="${savedValue}"]`);
      if (radioToSelect instanceof HTMLInputElement) {
        radioToSelect.checked = true;
      }
    }
    
    // Récupérer la date sélectionnée
    const selectedDate = new URLSearchParams(window.location.search).get('selectedDate') 
      || sessionStorage.getItem('reservation_selectedDate');
    
    // Récupérer la durée sélectionnée - en vérifiant d'abord les paramètres d'URL, puis sessionStorage
    const duration = new URLSearchParams(window.location.search).get('duration') 
      || sessionStorage.getItem('reservation_duration');
      
    console.log('Durée depuis sessionStorage:', sessionStorage.getItem('reservation_duration'));
    
    // Log all values for debugging
    console.log('DEBUG VALUES:', {
      date: selectedDate,
      duration: duration,
      vrType: new URLSearchParams(window.location.search).get('vrType') || sessionStorage.getItem('reservation_vrType'),
      numberOfPeople: new URLSearchParams(window.location.search).get('numberOfPeople') || sessionStorage.getItem('reservation_numberOfPeople'),
      savedTime: savedValue
    });
    
    // Update the summary details with client-side data
    const updateSummaryDetails = () => {
      // Format the date for display
      const jsDateEl = document.getElementById('jsDate');
      if (jsDateEl) {
        // Get date from URL params or sessionStorage
        const dateValue = selectedDate || sessionStorage.getItem('reservation_selectedDate');
        
        if (dateValue) {
          try {
            const date = new Date(dateValue);
            const options: Intl.DateTimeFormatOptions = { 
              weekday: 'long', 
              day: 'numeric', 
              month: 'long', 
              year: 'numeric' 
            };
            const formattedDate = date.toLocaleDateString('fr-FR', options);
            jsDateEl.textContent = formattedDate;
            jsDateEl.classList.remove('italic', 'text-gray-500');
          } catch (error) {
            console.error('Error formatting date:', error);
            jsDateEl.textContent = 'Date non disponible';
          }
        } else {
          jsDateEl.textContent = 'Date non disponible';
        }
      }
      
      // Update VR type
      const vrType = new URLSearchParams(window.location.search).get('vrType') || sessionStorage.getItem('reservation_vrType');
      const jsVrTypeEl = document.getElementById('jsVrType');
      if (jsVrTypeEl && vrType) {
        jsVrTypeEl.textContent = vrType === 'wired' ? 'VR filaire' : 'VR sans fil';
      }
      
      // Update duration
      const duration = new URLSearchParams(window.location.search).get('duration') || sessionStorage.getItem('reservation_duration');
      const jsDurationEl = document.getElementById('jsDuration');
      if (jsDurationEl && duration) {
        jsDurationEl.textContent = `${duration} minutes`;
      }
      
      // Update number of people
      const numberOfPeople = new URLSearchParams(window.location.search).get('numberOfPeople') || sessionStorage.getItem('reservation_numberOfPeople');
      const jsNumberOfPeopleEl = document.getElementById('jsNumberOfPeople');
      if (jsNumberOfPeopleEl && numberOfPeople) {
        jsNumberOfPeopleEl.textContent = numberOfPeople;
      }
    };
    
    // Call the update function
    updateSummaryDetails();
    
    // Ajouter un gestionnaire d'événement pour la soumission du formulaire
    if (timeForm instanceof HTMLFormElement) {
      timeForm.addEventListener('submit', (e) => {
        e.preventDefault(); // Prevent normal form submission
        
        // Récupérer la valeur sélectionnée
        const selectedRadio = document.querySelector('input[name="selectedTime"]:checked');
        if (selectedRadio instanceof HTMLInputElement) {
          const selectedTime = selectedRadio.value;
          
          // Stocker la valeur dans sessionStorage
          sessionStorage.setItem('reservation_selectedTime', selectedTime);
          
          // Make sure we have all values from sessionStorage as backup
          const vrType = new URLSearchParams(window.location.search).get('vrType') 
            || sessionStorage.getItem('reservation_vrType');
          const numberOfPeople = new URLSearchParams(window.location.search).get('numberOfPeople') 
            || sessionStorage.getItem('reservation_numberOfPeople');
          const duration = new URLSearchParams(window.location.search).get('duration') 
            || sessionStorage.getItem('reservation_duration');
          const dateValue = selectedDate || sessionStorage.getItem('reservation_selectedDate');
          
          // Save all values to sessionStorage again to ensure consistency
          if (vrType) sessionStorage.setItem('reservation_vrType', vrType);
          if (numberOfPeople) sessionStorage.setItem('reservation_numberOfPeople', numberOfPeople);
          if (duration) sessionStorage.setItem('reservation_duration', duration);
          if (dateValue) sessionStorage.setItem('reservation_selectedDate', dateValue);
          
          // Créer un datetime combiné pour la page suivante
          if (dateValue) {
            const selectedDateTime = `${dateValue}T${selectedTime}`;
            sessionStorage.setItem('reservation_selectedDateTime', selectedDateTime);
            
            // Build URL manually with all needed parameters 
            let nextUrl = '/reservation/contact?';
            nextUrl += `selectedTime=${encodeURIComponent(selectedTime)}`;
            if (vrType) nextUrl += `&vrType=${encodeURIComponent(vrType)}`;
            if (numberOfPeople) nextUrl += `&numberOfPeople=${encodeURIComponent(numberOfPeople)}`;
            if (duration) nextUrl += `&duration=${encodeURIComponent(duration)}`;
            if (dateValue) nextUrl += `&selectedDate=${encodeURIComponent(dateValue)}`;
            nextUrl += `&selectedDateTime=${encodeURIComponent(selectedDateTime)}`;
            
            console.log('Navigating to:', nextUrl);
            window.location.href = nextUrl;
          } else {
            console.error('No date available for creating the datetime');
            alert('Erreur: Aucune date sélectionnée. Veuillez revenir à l\'étape précédente.');
          }
        } else {
          alert('Veuillez sélectionner un horaire avant de continuer.');
        }
      });
    }
  });
</script>