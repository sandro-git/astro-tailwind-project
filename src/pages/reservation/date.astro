---
import ReservationLayout from '../../layouts/ReservationLayout.astro';
import { getLocalTimeZone, today } from '@internationalized/date';

// Get query parameters from previous steps
const numberOfPeople = Astro.url.searchParams.get('numberOfPeople');
const vrType = Astro.url.searchParams.get('vrType');
const duration = Astro.url.searchParams.get('duration');

// Define interfaces for our data structures
interface TimeSlot {
  time: string;
  available: boolean;
}

interface AvailableDate {
  date: string;
  dayName: string;
  dayNumber: number;
  month: string;
  timeSlots: TimeSlot[];
  isSoon?: boolean;
}

// Create mock data instead of using Date constructor for TypeScript validation
const todayDate = today(getLocalTimeZone());
const availableDates: AvailableDate[] = [];

// Generate mock available dates
const dayNames = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
const monthNames = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];

// This is a duplicate definition, removed

// Generate today plus the next 90 days of available dates (to ensure multiple months)
const now = new Date();
const currentDay = now.getDate();
const currentMonth = now.getMonth();
const currentYear = now.getFullYear();

// Generate dates starting from today (0) to 90 days in the future
for (let i = 0; i <= 90; i++) {
  // Create a new date object for each day
  const futureDate = new Date(currentYear, currentMonth, currentDay + i);
  const dateString = futureDate.toISOString().split('T')[0]; // YYYY-MM-DD format
  
  // Get the day of week (0 = Sunday, 1 = Monday, etc.)
  const dayOfWeek = futureDate.getDay();
  // Convert to our array index (our array starts with Monday at 0)
  const dayIndex = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
  
  // Get the actual month for this date
  const monthIndex = futureDate.getMonth();
  
  // Format the day number
  const dayNumber = futureDate.getDate();
  
  // Generate 3 time slots per day
  const timeSlots: TimeSlot[] = [
    { time: '10:00', available: Math.random() > 0.3 },
    { time: '14:00', available: Math.random() > 0.3 },
    { time: '18:00', available: Math.random() > 0.3 }
  ];
  
  // Determine if the date is within the next 7 days
  const isNextWeek = i > 0 && i <= 7;
  
  // Only add dates with at least one available time slot and skip today
  if (timeSlots.some(slot => slot.available) && i > 0) {
    availableDates.push({
      date: dateString,
      dayName: dayNames[dayIndex],
      dayNumber: dayNumber,
      month: monthNames[monthIndex],
      timeSlots,
      isSoon: isNextWeek
    });
  }
}

// Define type for grouped dates
interface GroupedDates {
  [key: string]: AvailableDate[];
}

// Group dates by month
const datesByMonth = availableDates.reduce<GroupedDates>((acc, date) => {
  const month = date.month;
  if (!acc[month]) acc[month] = [];
  acc[month].push(date);
  return acc;
}, {});

// Define a consistent order for displaying months
const monthOrder = monthNames.map(month => month.toLowerCase());

// Sort months for display - this ensures September, October, etc. display properly
const sortedDatesByMonth = Object.entries(datesByMonth).sort(([monthA], [monthB]) => {
  const indexA = monthOrder.indexOf(monthA.toLowerCase());
  const indexB = monthOrder.indexOf(monthB.toLowerCase());
  return indexA - indexB;
});

// Capitalize first letter of month names for display
const capitalizeMonth = (month) => {
  return month.charAt(0).toUpperCase() + month.slice(1);
};
---

<ReservationLayout title="Réservation - Sélection de la date" currentStep={4}>
  <form method="get" action="/reservation/time" class="space-y-6" id="dateForm">
    <!-- Pass along the previous steps' data -->
    <input type="hidden" name="numberOfPeople" value={numberOfPeople} />
    <input type="hidden" name="vrType" value={vrType} />
    <input type="hidden" name="duration" value={duration} />
    
    <div>
      <h2 class="text-2xl font-bold text-gray-900 mb-4">Choisissez une date</h2>
      <p class="text-gray-600 mb-6">Sélectionnez la date de votre réservation</p>
      
      <!-- Current month title (hidden) -->
      <div class="current-month-title mb-6 hidden">
        <h3 class="text-xl font-medium text-gray-800 capitalize">
          {monthNames[new Date().getMonth()]}
        </h3>
      </div>
      
      <!-- Month selector -->
      <div class="month-selector mb-6">
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
          {(() => {
            // Get current date information
            const now = new Date();
            const currentMonth = now.getMonth();
            const currentYear = now.getFullYear();
            
            // Get all available months and sort them chronologically
            const availableMonths = Object.keys(datesByMonth)
              .map(monthName => {
                const monthIndex = monthNames.indexOf(monthName);
                return {
                  name: monthName,
                  index: monthIndex,
                  year: monthIndex < currentMonth ? currentYear + 1 : currentYear,
                  isCurrent: monthIndex === currentMonth
                };
              })
              .sort((a, b) => {
                // Sort by year first, then by month index
                if (a.year !== b.year) return a.year - b.year;
                return a.index - b.index;
              });
              
            // Use the month order defined by monthNames
            const sortedMonths = [...availableMonths].sort((a, b) => {
              return monthOrder.indexOf(a.name.toLowerCase()) - monthOrder.indexOf(b.name.toLowerCase());
            });
            
            // Return month options
            return sortedMonths.map(month => (
              <button 
                type="button"
                class={`month-button py-2 px-4 rounded-lg text-center transition-all w-full ${month.isCurrent ? 
                  'bg-blue-100 text-blue-700 font-bold border-2 border-blue-500' : 
                  'bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200'}`}
                data-month={month.name}
              >
                {capitalizeMonth(month.name)}
              </button>
            ));
          })()}
        </div>
      </div>
      
      <div class="calendar-container">
        {sortedDatesByMonth.map(([month, dates]: [string, AvailableDate[]]) => {
          // Sort dates by date string (YYYY-MM-DD format)
          const sortedDates = [...dates].sort((a, b) => 
            a.date.localeCompare(b.date)
          );
          
          return (
            <div class="month-section pb-6 transition-all duration-300 ease-in-out" data-month={month}>
              <!-- Month headers removed from day container -->
              <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-7 gap-4">
                {sortedDates.map((date: AvailableDate) => (
                <label class="date-card border rounded-lg overflow-hidden cursor-pointer hover:border-blue-400 hover:shadow-sm transition-all duration-200">
                  <input 
                    type="radio" 
                    name="selectedDate" 
                    value={date.date} 
                    class="date-radio sr-only" 
                    required
                    data-date={date.date}
                  />
                  <div class="date-content h-full transition-all duration-200">
                    <div class="date-header p-4 text-center bg-white flex flex-col items-center justify-center h-full">
                      <div class="text-xs text-gray-500 capitalize mb-1">{date.dayName}</div>
                      <div class="text-xl font-bold">{date.dayNumber}</div>
                    </div>
                  </div>
                </label>
              ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
    
    <div class="pt-4 flex flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between">
      <a 
        href={`/reservation/duration?numberOfPeople=${numberOfPeople}&vrType=${vrType}`} 
        class="py-2.5 px-5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors text-center"
      >
        ← Retour
      </a>
      <button
        type="submit"
        id="continueButton"
        class="py-2.5 px-5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors opacity-50 cursor-not-allowed"
        disabled
      >
        Continuer →
      </button>
    </div>
  </form>
</ReservationLayout>

<script>
  // Enhance form interactions and handle selections
  document.addEventListener('DOMContentLoaded', () => {
    // Retrieve data from URL or sessionStorage
    const params = new URLSearchParams(window.location.search);
    const numberOfPeople = params.get('numberOfPeople') || sessionStorage.getItem('reservation_numberOfPeople');
    const vrType = params.get('vrType') || sessionStorage.getItem('reservation_vrType');
    
    // Update hidden inputs if we have the data in sessionStorage
    if (numberOfPeople && !params.get('numberOfPeople')) {
      const hiddenInput = document.querySelector('input[name="numberOfPeople"]');
      if (hiddenInput instanceof HTMLInputElement) {
        hiddenInput.value = numberOfPeople;
      }
    }
    
    if (vrType && !params.get('vrType')) {
      const hiddenInput = document.querySelector('input[name="vrType"]');
      if (hiddenInput instanceof HTMLInputElement) {
        hiddenInput.value = vrType;
      }
    }
    
    // Handle date selection
    const radioButtons = document.querySelectorAll('.date-radio');
    const continueButton = document.getElementById('continueButton');
    const dateCards = document.querySelectorAll('.date-card');
    
    // Make the labels/cards clickable and trigger the radio button inside
    dateCards.forEach(card => {
      card.addEventListener('click', () => {
        const radio = card.querySelector('.date-radio');
        if (radio instanceof HTMLInputElement) {
          radio.checked = true;
          radio.dispatchEvent(new Event('change'));
        }
      });
    });
    
    radioButtons.forEach(radio => {
      radio.addEventListener('change', () => {
        if (radio instanceof HTMLInputElement && radio.checked) {
          // Enable continue button
          if (continueButton) {
            if (continueButton instanceof HTMLButtonElement) {
              continueButton.disabled = false;
            }
            continueButton.classList.remove('opacity-50', 'cursor-not-allowed');
          }
          
          // Store selection in session storage for persistence
          sessionStorage.setItem('reservation_selectedDate', radio.value);
          
          // Reset all other cards
          document.querySelectorAll('.date-radio').forEach(r => {
            if (r instanceof HTMLInputElement && r !== radio) {
              const parentLabel = r.closest('.date-card');
              if (parentLabel) {
                parentLabel.classList.remove('ring-2', 'ring-blue-500');
              }
            }
          });
          
          // Highlight selected card
          const parentLabel = radio.closest('.date-card');
          if (parentLabel) {
            parentLabel.classList.add('ring-2', 'ring-blue-500');
          }
          
          console.log('Date sélectionnée:', radio.value);
        }
      });
    });
    
    // Pre-select date based on previous selection if navigating back
    const urlParams = new URLSearchParams(window.location.search);
    const urlDate = urlParams.get('selectedDate');
    const savedDate = urlDate || sessionStorage.getItem('reservation_selectedDate');
    
    if (savedDate) {
      console.log('Tentative de présélection de date:', savedDate);
      const radioToSelect = document.querySelector(`.date-radio[value="${savedDate}"]`);
      if (radioToSelect instanceof HTMLInputElement) {
        radioToSelect.checked = true;
        // Trigger change event to update button state
        radioToSelect.dispatchEvent(new Event('change'));
        
        // Get the month of the selected date and select it in the buttons
        const monthSection = radioToSelect.closest('.month-section');
        if (monthSection) {
          const selectedMonth = monthSection.getAttribute('data-month');
          if (selectedMonth) {
            // Find the month button with this data-month attribute
            const monthButtonToSelect = document.querySelector(`.month-button[data-month="${selectedMonth}"]`);
            if (monthButtonToSelect) {
              // Simulate a click on this button to show the related month section
              monthButtonToSelect.click();
            }
          }
        }
        
        console.log('Date présélectionnée avec succès:', savedDate);
      } else {
        console.log('Bouton radio correspondant non trouvé');
      }
    } else {
      console.log('Aucune date sauvegardée trouvée');
    }
    
    // Handle month selection
    const monthButtons = document.querySelectorAll('.month-button');
    const monthSections = document.querySelectorAll('.month-section');
    
    // Function to get the current month name in French
    const getCurrentMonthName = () => {
      // Get current month name from our defined array for consistency
      const monthIndex = new Date().getMonth();
      const monthName = monthNames[monthIndex];
      return monthName.toLowerCase();
    };
    
    // Function to show month buttons at top but only show current month section
    const showTopMonthsButOnlyCurrentSection = () => {
      const currentMonthName = getCurrentMonthName();
      
      // Show all month buttons but highlight current one
      let firstButton = null;
      let currentButton = null;
      
      monthButtons.forEach(button => {
        if (!firstButton) firstButton = button;
        
        const buttonMonth = button.getAttribute('data-month');
        if (buttonMonth && buttonMonth.toLowerCase() === currentMonthName) {
          currentButton = button;
          // Highlight current month button
          button.classList.add('bg-blue-100', 'text-blue-700', 'font-bold', 'border-2', 'border-blue-500');
          button.classList.remove('bg-gray-100', 'text-gray-700', 'border', 'border-gray-300');
        } else {
          // Regular styling for other months
          button.classList.remove('bg-blue-100', 'text-blue-700', 'font-bold', 'border-2', 'border-blue-500');
          button.classList.add('bg-gray-100', 'text-gray-700', 'border', 'border-gray-300');
        }
      });
      
      // Use current month button or fallback to first button if current month not found
      const activeButton = currentButton || firstButton;
      if (activeButton) {
        const selectedMonth = activeButton.getAttribute('data-month');
        
        // Only show the selected month's section
        monthSections.forEach(section => {
          const sectionMonth = section.getAttribute('data-month');
          if (sectionMonth && sectionMonth.toLowerCase() === selectedMonth.toLowerCase()) {
            section.style.display = 'block';
          } else {
            section.style.display = 'none';
          }
        });
      }
    };
    
    // Add click handlers for month buttons
    monthButtons.forEach(button => {
      button.addEventListener('click', () => {
        const selectedMonth = button.getAttribute('data-month');
        if (selectedMonth) {
          // When clicked, we want to show this month's section and hide others
          // Update button styles
          monthButtons.forEach(btn => {
            const btnMonth = btn.getAttribute('data-month');
            const isSelected = btnMonth === selectedMonth;
            
            if (isSelected) {
              btn.classList.add('bg-blue-100', 'text-blue-700', 'font-bold', 'border-2', 'border-blue-500');
              btn.classList.remove('bg-gray-100', 'text-gray-700', 'border', 'border-gray-300');
            } else {
              btn.classList.remove('bg-blue-100', 'text-blue-700', 'font-bold', 'border-2', 'border-blue-500');
              btn.classList.add('bg-gray-100', 'text-gray-700', 'border', 'border-gray-300');
            }
          });
          
          // Show only the selected month section
          monthSections.forEach(section => {
            const sectionMonth = section.getAttribute('data-month');
            if (sectionMonth && sectionMonth.toLowerCase() === selectedMonth.toLowerCase()) {
              // Show this section
              section.style.display = 'block';
            } else {
              // Hide all other sections
              section.style.display = 'none';
            }
          });
        }
      });
    });
    
    // Initialize the UI - show all months but only current month's days
    showTopMonthsButOnlyCurrentSection();
    
    // Initially hide all month sections except the current month
    const currentMonthName = getCurrentMonthName();
    monthSections.forEach(section => {
      const sectionMonth = section.getAttribute('data-month');
      if (sectionMonth && sectionMonth.toLowerCase() === currentMonthName) {
        section.style.display = 'block';
      } else {
        section.style.display = 'none';
      }
    });
    
    // Vérifier le formulaire avant soumission
    const dateForm = document.getElementById('dateForm');
    if (dateForm instanceof HTMLFormElement) {
      dateForm.addEventListener('submit', (e) => {
        e.preventDefault(); // Empêche la soumission normale du formulaire
        
        // Vérifions si une date est sélectionnée
        const checkedRadio = document.querySelector('input[name="selectedDate"]:checked');
        
        console.log('Formulaire soumis, radio sélectionné:', checkedRadio);
        
        if (!checkedRadio) {
          console.error('Aucune date sélectionnée lors de la soumission du formulaire');
          alert('Veuillez sélectionner une date avant de continuer.');
          return;
        }
        
        console.log('Formulaire soumis avec date:', checkedRadio instanceof HTMLInputElement ? checkedRadio.value : 'undefined');
        
        // Assurons-nous que la valeur est bien dans session storage
        if (checkedRadio instanceof HTMLInputElement) {
          sessionStorage.setItem('reservation_selectedDate', checkedRadio.value);
        }
        
        // Créer l'URL manuellement avec tous les paramètres nécessaires
        const numberOfPeopleInput = dateForm.querySelector('input[name="numberOfPeople"]');
        const numberOfPeopleParam = numberOfPeopleInput instanceof HTMLInputElement ? numberOfPeopleInput.value : '';
        const vrTypeInput = dateForm.querySelector('input[name="vrType"]');
        const vrTypeParam = vrTypeInput instanceof HTMLInputElement ? vrTypeInput.value : '';
        const durationInput = dateForm.querySelector('input[name="duration"]');
        const durationParam = durationInput instanceof HTMLInputElement ? durationInput.value : '';
        const selectedDateParam = checkedRadio instanceof HTMLInputElement ? checkedRadio.value : '';
        
        // Construire l'URL avec les paramètres
        const nextUrl = `/reservation/time?numberOfPeople=${encodeURIComponent(numberOfPeopleParam)}&vrType=${encodeURIComponent(vrTypeParam)}&duration=${encodeURIComponent(durationParam)}&selectedDate=${encodeURIComponent(selectedDateParam)}`;
        
        console.log('Redirection vers:', nextUrl);
        
        // Rediriger vers la page suivante
        window.location.href = nextUrl;
      });
    }
  });
</script>