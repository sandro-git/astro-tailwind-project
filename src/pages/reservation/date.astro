---
import ReservationLayout from '../../layouts/ReservationLayout.astro';
import { getLocalTimeZone, today } from '@internationalized/date';

// Get query parameters from previous steps
const numberOfPeople = Astro.url.searchParams.get('numberOfPeople');
const vrType = Astro.url.searchParams.get('vrType');
const duration = Astro.url.searchParams.get('duration');

// Define the form action to handle date selection using the new Astro API
export async function POST({ request }) {
  const formData = await request.formData();
  const selectedDate = formData.get('selectedDate');
  
  console.log('POST action received with selectedDate:', selectedDate);
  
  // Validate that a date was selected
  if (!selectedDate) {
    console.error('No date selected in POST request');
    return new Response(JSON.stringify({
      success: false,
      message: 'Aucune date sélectionnée. Veuillez sélectionner une date.',
    }), {
      status: 400,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }
  
  // Format the query string with all parameters
  const searchParams = new URLSearchParams();
  searchParams.set('selectedDate', String(selectedDate));
  
  // Add other reservation parameters if they exist
  if (numberOfPeople) searchParams.set('numberOfPeople', numberOfPeople);
  if (vrType) searchParams.set('vrType', vrType);
  if (duration) searchParams.set('duration', duration);
  
  // Log the redirect URL for debugging
  const redirectUrl = `${new URL(request.url).origin}/reservation/time?${searchParams.toString()}`;
  console.log('Redirecting to:', redirectUrl);
  
  // Redirect to the time selection page with the selected date
  return Response.redirect(redirectUrl, 302);
}

// Define interfaces for our data structures
interface TimeSlot {
  time: string;
  available: boolean;
}

interface AvailableDate {
  date: string;
  dayName: string;
  dayNumber: number;
  month: string;
  timeSlots: TimeSlot[];
  isSoon?: boolean;
}

// Create mock data instead of using Date constructor for TypeScript validation
// We'll use this for internationalization later
const _todayDate = today(getLocalTimeZone());
const availableDates: AvailableDate[] = [];

// Generate mock available dates
const dayNames = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
const monthNames = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];

// Generate dates for each day
const generateDates = () => {
  // Implementation removed to avoid duplicate code
}

// Generate dates starting from today for the next 6 months
// Use current timestamp - ignore TypeScript errors in Astro files
// @ts-ignore
const now = new Date();
const currentDay = now.getDate();
const currentMonth = now.getMonth();
const currentYear = now.getFullYear();

// Generate dates for 6 months in the future
for (let monthOffset = 0; monthOffset < 6; monthOffset++) {
  // Calculate target month and year
  const targetMonth = (currentMonth + monthOffset) % 12;
  const targetYear = currentYear + Math.floor((currentMonth + monthOffset) / 12);
  
  // Get the number of days in this month
  // @ts-ignore
  const daysInMonth = new Date(targetYear, targetMonth + 1, 0).getDate();
  
  // Start from 1st day if we're looking at a future month, otherwise start from today
  const startDay = monthOffset === 0 ? currentDay : 1;
  
  // Generate each day in the month
  for (let day = startDay; day <= daysInMonth; day++) {
    // Create a date object for each day
    // @ts-ignore
    const futureDate = new Date(targetYear, targetMonth, day);
    
    // Formatage manuel de la date pour éviter les problèmes de timezone avec toISOString()
    const formattedYear = futureDate.getFullYear();
    const formattedMonth = String(futureDate.getMonth() + 1).padStart(2, '0');
    const formattedDay = String(futureDate.getDate()).padStart(2, '0');
    const dateString = `${formattedYear}-${formattedMonth}-${formattedDay}`; // YYYY-MM-DD format
    
    // Get the day of week (0 = Sunday, 1 = Monday, etc.)
    const dayOfWeek = futureDate.getDay();
    // Convert to our array index (our array starts with Monday at 0)
    const dayIndex = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
    
    // Format the day number
    const dayNumber = futureDate.getDate();
    
    // Generate time slots from 14:00 to 22:00 (every 2 hours)
    const timeSlots: TimeSlot[] = [
      { time: '14:00', available: Math.random() > 0.3 },
      { time: '16:00', available: Math.random() > 0.3 },
      { time: '18:00', available: Math.random() > 0.3 },
      { time: '20:00', available: Math.random() > 0.3 }
    ];
    
    // Determine if the date is within the next 7 days
    const isNextWeek = monthOffset === 0 && (day - currentDay) <= 7 && (day - currentDay) > 0;
    
    // Only add dates with at least one available time slot
    if (timeSlots.some(slot => slot.available)) {
      availableDates.push({
        date: dateString,
        dayName: dayNames[dayIndex],
        dayNumber: dayNumber,
        month: monthNames[targetMonth],
        timeSlots,
        isSoon: isNextWeek
      });
    }
  }
}

// Define type for grouped dates
interface GroupedDates {
  [key: string]: AvailableDate[];
}

// Group dates by month
const datesByMonth = availableDates.reduce<GroupedDates>((acc, date) => {
  const month = date.month;
  if (!acc[month]) acc[month] = [];
  acc[month].push(date);
  return acc;
}, {});

// Define a consistent order for displaying months
const monthOrder = monthNames.map(month => month.toLowerCase());

// Sort months for display - this ensures September, October, etc. display properly
const sortedDatesByMonth = Object.entries(datesByMonth).sort(([monthA], [monthB]) => {
  const indexA = monthOrder.indexOf(monthA.toLowerCase());
  const indexB = monthOrder.indexOf(monthB.toLowerCase());
  return indexA - indexB;
});

// Capitalize first letter of month names for display
const capitalizeMonth = (month: string): string => {
  return month.charAt(0).toUpperCase() + month.slice(1);
};
---

<ReservationLayout title="Réservation - Sélection de la date" currentStep={4}>
  <form method="post" class="space-y-6" id="dateForm">
    <!-- With Astro Actions, we don't need to pass these as hidden inputs, they'll be handled server-side -->
    <!-- But we can keep them for client-side use if needed -->
    <input type="hidden" name="numberOfPeople" value={numberOfPeople} />
    <input type="hidden" name="vrType" value={vrType} />
    <input type="hidden" name="duration" value={duration} />
    
    <div>
      <h2 class="text-2xl font-bold text-gray-900 mb-4">Choisissez une date</h2>
      <p class="text-gray-600 mb-6">Sélectionnez la date de votre réservation</p>
      
      <!-- Current month title (hidden) -->
      <div class="current-month-title mb-6 hidden">
        <h3 class="text-xl font-medium text-gray-800 capitalize">
          {monthNames[now.getMonth()]}
        </h3>
      </div>
      
      <!-- Month selector dropdown -->
      <div class="month-selector mb-6">
        <div class="mb-3 relative">
          <button 
            type="button" 
            id="monthDropdownButton"
            class="w-full md:w-64 flex items-center justify-between bg-white border border-gray-300 rounded-lg px-4 py-3 text-lg font-medium text-gray-800 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <span id="currentMonthDisplay">{capitalizeMonth(monthNames[now.getMonth()])}</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          
          <!-- Dropdown panel (hidden by default) -->
          <div id="monthDropdownPanel" class="mt-2 w-full md:w-64 bg-white border border-gray-300 rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto absolute" style="display: none;">
            <div class="p-2 grid grid-cols-1 gap-1">
              {(() => {
                // Get current date information
                // @ts-ignore
                const now = new Date();
                const currentMonth = now.getMonth();
                const currentYear = now.getFullYear();
                
                // Get all available months and sort them chronologically
                const availableMonths = Object.keys(datesByMonth)
                  .map(monthName => {
                    const monthIndex = monthNames.indexOf(monthName);
                    return {
                      name: monthName,
                      index: monthIndex,
                      year: monthIndex < currentMonth ? currentYear + 1 : currentYear,
                      isCurrent: monthIndex === currentMonth
                    };
                  })
                  .sort((a, b) => {
                    // Sort by year first, then by month index
                    if (a.year !== b.year) return a.year - b.year;
                    return a.index - b.index;
                  });
                  
                // Return month options
                return availableMonths.map(month => (
                  <button 
                    type="button"
                    class={`month-button py-2 px-4 rounded-md text-left transition-all w-full ${month.isCurrent ? 
                      'bg-blue-100 text-blue-700 font-bold' : 
                      'text-gray-700 hover:bg-gray-100'}`}
                    data-month={month.name}
                  >
                    {capitalizeMonth(month.name)} {month.index < currentMonth ? currentYear + 1 : currentYear}
                  </button>
                ));
              })()}
            </div>
          </div>
        </div>
      </div>
      
      <div class="calendar-container">
        {sortedDatesByMonth.map(([month, dates]: [string, AvailableDate[]]) => {
          // Sort dates by date string (YYYY-MM-DD format)
          const sortedDates = [...dates].sort((a, b) => 
            a.date.localeCompare(b.date)
          );
          
          // Hide all months by default - will be shown via JavaScript
          // Use inline style to ensure they're hidden
          // @ts-ignore
          const currentMonth = new Date().getMonth();
          const monthIndex = monthNames.indexOf(month);
          const isCurrentMonth = monthIndex === currentMonth;
          
          return (
            <div 
              class={`month-section pb-6 transition-all duration-300 ease-in-out ${isCurrentMonth ? '' : 'hidden'}`} 
              data-month={month} 
              style={`display: ${isCurrentMonth ? 'block' : 'none'};`}
            >
              <!-- Month headers removed from day container -->
              <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-7 gap-4">
                {sortedDates.map((date: AvailableDate) => (
                <label class="date-card border rounded-lg overflow-hidden cursor-pointer hover:border-blue-400 hover:shadow-sm transition-all duration-200">
                  <input 
                    type="radio" 
                    name="selectedDate" 
                    value={date.date} 
                    class="date-radio sr-only" 
                    required
                    data-date={date.date}
                  />
                  <div class="date-content h-full transition-all duration-200">
                    <div class="date-header p-4 text-center bg-white flex flex-col items-center justify-center h-full">
                      <div class="text-xs text-gray-500 capitalize mb-1">{date.dayName}</div>
                      <div class="text-xl font-bold">{date.dayNumber}</div>
                    </div>
                  </div>
                </label>
              ))}
              </div>
            </div>
          );
        })}
      </div>
    </div>
    
    <div class="pt-4 flex flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between">
      <a 
        href={`/reservation/duration?numberOfPeople=${numberOfPeople}&vrType=${vrType}`} 
        class="py-2.5 px-5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors text-center"
      >
        ← Retour
      </a>
      <button
        type="submit"
        id="continueButton"
        disabled
        class="py-2.5 px-5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors opacity-50 cursor-not-allowed"
      >
        Continuer →
      </button>
    </div>
  </form>
</ReservationLayout>

<script>
  // Add a pure JavaScript click handler that doesn't rely on Astro's hydration
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing date selection page');
    
    // DOM elements
    const dateForm = document.getElementById('dateForm');
    const continueButton = document.getElementById('continueButton');
    const dateCards = document.querySelectorAll('.date-card');
    const dropdownButton = document.getElementById('monthDropdownButton');
    const dropdownPanel = document.getElementById('monthDropdownPanel');
    
    // Helper function to enable continue button
    const enableContinueButton = () => {
      if (continueButton instanceof HTMLButtonElement) {
        console.log('Enabling continue button');
        continueButton.disabled = false;
        continueButton.classList.remove('opacity-50', 'cursor-not-allowed');
      }
    };
    
    // Helper function to highlight selected card
    const highlightSelectedCard = (selectedCard) => {
      // Reset all cards
      dateCards.forEach(card => {
        card.classList.remove('ring-2', 'ring-blue-500');
      });
      
      // Highlight selected card
      if (selectedCard) {
        selectedCard.classList.add('ring-2', 'ring-blue-500');
      }
    };
    
    // Initialize dropdown
    if (dropdownButton && dropdownPanel) {
      console.log('Setting up month dropdown');
      
      // Toggle dropdown on button click
      dropdownButton.onclick = function(e) {
        e.preventDefault();
        dropdownPanel.style.display = dropdownPanel.style.display === 'block' ? 'none' : 'block';
      };
      
      // Set up month buttons
      const monthButtons = document.querySelectorAll('.month-button');
      monthButtons.forEach(btn => {
        if (btn instanceof HTMLElement) {
          btn.onclick = function(e) {
            e.stopPropagation();
            if (this instanceof HTMLElement) {
              const month = this.getAttribute('data-month');
              console.log('Selected month:', month);
              
              // Update button text
              const currentMonthDisplay = document.getElementById('currentMonthDisplay');
              if (currentMonthDisplay && month) {
                currentMonthDisplay.textContent = month.charAt(0).toUpperCase() + month.slice(1);
              }
              
              // Show the corresponding month section and hide others
              const monthSections = document.querySelectorAll('.month-section');
              monthSections.forEach(section => {
                if (section instanceof HTMLElement) {
                  const sectionMonth = section.getAttribute('data-month');
                  section.style.display = sectionMonth === month ? 'block' : 'none';
                }
              });
              
              // Hide dropdown
              if (dropdownPanel) dropdownPanel.style.display = 'none';
            }
          };
        }
      });
      
      // Close dropdown when clicking outside
      document.body.addEventListener('click', function(e) {
        const target = e.target;
        if (target instanceof Node && dropdownButton && dropdownPanel &&
            target !== dropdownButton && 
            !dropdownButton.contains(target) && 
            !dropdownPanel.contains(target) && 
            dropdownPanel.style.display === 'block') {
          dropdownPanel.style.display = 'none';
        }
      });
    }
    
    // Handle date card selection
    dateCards.forEach(card => {
      card.addEventListener('click', () => {
        const radio = card.querySelector('.date-radio');
        if (radio instanceof HTMLInputElement) {
          // Set radio as checked
          radio.checked = true;
          
          // Highlight selected card and enable button
          highlightSelectedCard(card);
          enableContinueButton();
          
          // Store in sessionStorage
          sessionStorage.setItem('reservation_selectedDate', radio.value);
          console.log('Date selected and stored:', radio.value);
        }
      });
    });
    
    // Check for preselected date
    const urlParams = new URLSearchParams(window.location.search);
    const urlDate = urlParams.get('selectedDate');
    const savedDate = urlDate || sessionStorage.getItem('reservation_selectedDate');
    
    if (savedDate) {
      console.log('Attempting to preselect date:', savedDate);
      const radioToSelect = document.querySelector(`.date-radio[value="${savedDate}"]`);
      if (radioToSelect instanceof HTMLInputElement) {
        radioToSelect.checked = true;
        const card = radioToSelect.closest('.date-card');
        
        // Highlight card and enable button
        if (card) highlightSelectedCard(card);
        enableContinueButton();
        
        // Show the correct month
        const monthSection = radioToSelect.closest('.month-section');
        if (monthSection) {
          const selectedMonth = monthSection.getAttribute('data-month');
          if (selectedMonth) {
            // Update dropdown display
            const currentMonthDisplay = document.getElementById('currentMonthDisplay');
            if (currentMonthDisplay) {
              currentMonthDisplay.textContent = selectedMonth.charAt(0).toUpperCase() + selectedMonth.slice(1);
            }
            
            // Show selected month section
            const monthSections = document.querySelectorAll('.month-section');
            monthSections.forEach(section => {
              if (section instanceof HTMLElement) {
                section.style.display = section === monthSection ? 'block' : 'none';
              }
            });
          }
        }
        
        console.log('Date preselected successfully:', savedDate);
      } else {
        console.log('Corresponding radio button not found for date:', savedDate);
      }
    }
    
    // Handle form submission
    if (dateForm instanceof HTMLFormElement) {
      console.log('Setting up form submission handler');
      dateForm.addEventListener('submit', (e) => {
        console.log('Form submit event triggered');
        
        // Check if a date is selected
        const checkedRadio = document.querySelector('input[name="selectedDate"]:checked');
        
        if (!checkedRadio) {
          e.preventDefault();
          console.error('No date selected when submitting form');
          alert('Veuillez sélectionner une date avant de continuer.');
          return;
        }
        
        if (checkedRadio instanceof HTMLInputElement) {
          const selectedDate = checkedRadio.value;
          
          // Store all reservation data in sessionStorage
          sessionStorage.setItem('reservation_selectedDate', selectedDate);
          
          const params = new URLSearchParams(window.location.search);
          ['vrType', 'numberOfPeople', 'duration'].forEach(param => {
            if (params.get(param)) {
              sessionStorage.setItem(`reservation_${param}`, params.get(param) || '');
            }
          });
          
          console.log('Form validated and submitting with date:', selectedDate);
          // Form will submit normally to trigger the Astro API POST handler
        }
      });
    }
  });
</script>